package com.vegetablestrading;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.vegetablestrading.bean.MyApply;
import com.vegetablestrading.bean.MyPickInfo;
import com.vegetablestrading.bean.TransportRecord;
import com.vegetablestrading.bean.TransportVegetableInfo;
import com.vegetablestrading.bean.UserInfo;

import com.vegetablestrading.MyApplyDao;
import com.vegetablestrading.MyPickInfoDao;
import com.vegetablestrading.TransportRecordDao;
import com.vegetablestrading.TransportVegetableInfoDao;
import com.vegetablestrading.UserInfoDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig myApplyDaoConfig;
    private final DaoConfig myPickInfoDaoConfig;
    private final DaoConfig transportRecordDaoConfig;
    private final DaoConfig transportVegetableInfoDaoConfig;
    private final DaoConfig userInfoDaoConfig;

    private final MyApplyDao myApplyDao;
    private final MyPickInfoDao myPickInfoDao;
    private final TransportRecordDao transportRecordDao;
    private final TransportVegetableInfoDao transportVegetableInfoDao;
    private final UserInfoDao userInfoDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        myApplyDaoConfig = daoConfigMap.get(MyApplyDao.class).clone();
        myApplyDaoConfig.initIdentityScope(type);

        myPickInfoDaoConfig = daoConfigMap.get(MyPickInfoDao.class).clone();
        myPickInfoDaoConfig.initIdentityScope(type);

        transportRecordDaoConfig = daoConfigMap.get(TransportRecordDao.class).clone();
        transportRecordDaoConfig.initIdentityScope(type);

        transportVegetableInfoDaoConfig = daoConfigMap.get(TransportVegetableInfoDao.class).clone();
        transportVegetableInfoDaoConfig.initIdentityScope(type);

        userInfoDaoConfig = daoConfigMap.get(UserInfoDao.class).clone();
        userInfoDaoConfig.initIdentityScope(type);

        myApplyDao = new MyApplyDao(myApplyDaoConfig, this);
        myPickInfoDao = new MyPickInfoDao(myPickInfoDaoConfig, this);
        transportRecordDao = new TransportRecordDao(transportRecordDaoConfig, this);
        transportVegetableInfoDao = new TransportVegetableInfoDao(transportVegetableInfoDaoConfig, this);
        userInfoDao = new UserInfoDao(userInfoDaoConfig, this);

        registerDao(MyApply.class, myApplyDao);
        registerDao(MyPickInfo.class, myPickInfoDao);
        registerDao(TransportRecord.class, transportRecordDao);
        registerDao(TransportVegetableInfo.class, transportVegetableInfoDao);
        registerDao(UserInfo.class, userInfoDao);
    }
    
    public void clear() {
        myApplyDaoConfig.clearIdentityScope();
        myPickInfoDaoConfig.clearIdentityScope();
        transportRecordDaoConfig.clearIdentityScope();
        transportVegetableInfoDaoConfig.clearIdentityScope();
        userInfoDaoConfig.clearIdentityScope();
    }

    public MyApplyDao getMyApplyDao() {
        return myApplyDao;
    }

    public MyPickInfoDao getMyPickInfoDao() {
        return myPickInfoDao;
    }

    public TransportRecordDao getTransportRecordDao() {
        return transportRecordDao;
    }

    public TransportVegetableInfoDao getTransportVegetableInfoDao() {
        return transportVegetableInfoDao;
    }

    public UserInfoDao getUserInfoDao() {
        return userInfoDao;
    }

}

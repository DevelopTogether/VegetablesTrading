package com.vegetablestrading;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.vegetablestrading.bean.TransportVegetableInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRANSPORT_VEGETABLE_INFO".
*/
public class TransportVegetableInfoDao extends AbstractDao<TransportVegetableInfo, Long> {

    public static final String TABLENAME = "TRANSPORT_VEGETABLE_INFO";

    /**
     * Properties of entity TransportVegetableInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, int.class, "Type", false, "TYPE");
        public final static Property VegetableIcon = new Property(2, String.class, "vegetableIcon", false, "VEGETABLE_ICON");
        public final static Property VegetableName = new Property(3, String.class, "vegetableName", false, "VEGETABLE_NAME");
        public final static Property Weight = new Property(4, String.class, "weight", false, "WEIGHT");
        public final static Property VegetablePrice = new Property(5, String.class, "vegetablePrice", false, "VEGETABLE_PRICE");
        public final static Property VegetableInfo = new Property(6, String.class, "vegetableInfo", false, "VEGETABLE_INFO");
        public final static Property TransportStartTime = new Property(7, String.class, "transportStartTime", false, "TRANSPORT_START_TIME");
        public final static Property TransportEndTime = new Property(8, String.class, "transportEndTime", false, "TRANSPORT_END_TIME");
        public final static Property Classify = new Property(9, String.class, "classify", false, "CLASSIFY");
        public final static Property WebURL = new Property(10, String.class, "webURL", false, "WEB_URL");
        public final static Property VegetableId = new Property(11, String.class, "vegetableId", false, "VEGETABLE_ID");
    }


    public TransportVegetableInfoDao(DaoConfig config) {
        super(config);
    }
    
    public TransportVegetableInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRANSPORT_VEGETABLE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TYPE\" INTEGER NOT NULL ," + // 1: Type
                "\"VEGETABLE_ICON\" TEXT," + // 2: vegetableIcon
                "\"VEGETABLE_NAME\" TEXT," + // 3: vegetableName
                "\"WEIGHT\" TEXT," + // 4: weight
                "\"VEGETABLE_PRICE\" TEXT," + // 5: vegetablePrice
                "\"VEGETABLE_INFO\" TEXT," + // 6: vegetableInfo
                "\"TRANSPORT_START_TIME\" TEXT," + // 7: transportStartTime
                "\"TRANSPORT_END_TIME\" TEXT," + // 8: transportEndTime
                "\"CLASSIFY\" TEXT," + // 9: classify
                "\"WEB_URL\" TEXT," + // 10: webURL
                "\"VEGETABLE_ID\" TEXT);"); // 11: vegetableId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRANSPORT_VEGETABLE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TransportVegetableInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
 
        String vegetableIcon = entity.getVegetableIcon();
        if (vegetableIcon != null) {
            stmt.bindString(3, vegetableIcon);
        }
 
        String vegetableName = entity.getVegetableName();
        if (vegetableName != null) {
            stmt.bindString(4, vegetableName);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(5, weight);
        }
 
        String vegetablePrice = entity.getVegetablePrice();
        if (vegetablePrice != null) {
            stmt.bindString(6, vegetablePrice);
        }
 
        String vegetableInfo = entity.getVegetableInfo();
        if (vegetableInfo != null) {
            stmt.bindString(7, vegetableInfo);
        }
 
        String transportStartTime = entity.getTransportStartTime();
        if (transportStartTime != null) {
            stmt.bindString(8, transportStartTime);
        }
 
        String transportEndTime = entity.getTransportEndTime();
        if (transportEndTime != null) {
            stmt.bindString(9, transportEndTime);
        }
 
        String classify = entity.getClassify();
        if (classify != null) {
            stmt.bindString(10, classify);
        }
 
        String webURL = entity.getWebURL();
        if (webURL != null) {
            stmt.bindString(11, webURL);
        }
 
        String vegetableId = entity.getVegetableId();
        if (vegetableId != null) {
            stmt.bindString(12, vegetableId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TransportVegetableInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
 
        String vegetableIcon = entity.getVegetableIcon();
        if (vegetableIcon != null) {
            stmt.bindString(3, vegetableIcon);
        }
 
        String vegetableName = entity.getVegetableName();
        if (vegetableName != null) {
            stmt.bindString(4, vegetableName);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(5, weight);
        }
 
        String vegetablePrice = entity.getVegetablePrice();
        if (vegetablePrice != null) {
            stmt.bindString(6, vegetablePrice);
        }
 
        String vegetableInfo = entity.getVegetableInfo();
        if (vegetableInfo != null) {
            stmt.bindString(7, vegetableInfo);
        }
 
        String transportStartTime = entity.getTransportStartTime();
        if (transportStartTime != null) {
            stmt.bindString(8, transportStartTime);
        }
 
        String transportEndTime = entity.getTransportEndTime();
        if (transportEndTime != null) {
            stmt.bindString(9, transportEndTime);
        }
 
        String classify = entity.getClassify();
        if (classify != null) {
            stmt.bindString(10, classify);
        }
 
        String webURL = entity.getWebURL();
        if (webURL != null) {
            stmt.bindString(11, webURL);
        }
 
        String vegetableId = entity.getVegetableId();
        if (vegetableId != null) {
            stmt.bindString(12, vegetableId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TransportVegetableInfo readEntity(Cursor cursor, int offset) {
        TransportVegetableInfo entity = new TransportVegetableInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // Type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // vegetableIcon
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // vegetableName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // weight
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // vegetablePrice
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // vegetableInfo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // transportStartTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // transportEndTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // classify
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // webURL
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // vegetableId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TransportVegetableInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setVegetableIcon(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVegetableName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWeight(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVegetablePrice(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVegetableInfo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTransportStartTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTransportEndTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setClassify(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setWebURL(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setVegetableId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TransportVegetableInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TransportVegetableInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TransportVegetableInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
